Day 1

Assignment 1: Implement following function to delete element from specified position in given array.
The function should return the updated logical size of array.
   int deleteFromPosition(int[] arr, int n, int pos);



[Some links to find problems for practice]
- JAVA Practice Problems
https://www.hackerrank.com/domains/java

- DS - Problem Solving
https://www.hackerrank.com/domains/data-structures

- Algorithms
https://www.hackerrank.com/domains/algorithms



[Array Practice Problems]
- 26. Remove Duplicates from Sorted Array
https://leetcode.com/problems/remove-duplicates-from-sorted-array/

- 27. Remove Element
https://leetcode.com/problems/remove-element/

- 66. Plus One
https://leetcode.com/problems/plus-one/

- 118. Pascal's Triangle
https://leetcode.com/problems/pascals-triangle/

- 217. Contains Duplicate
https://leetcode.com/problems/contains-duplicate/

- 268. Missing Number
https://leetcode.com/problems/missing-number/

- 283. Move Zeroes
https://leetcode.com/problems/move-zeroes/

- 414. Third Maximum Number
https://leetcode.com/problems/third-maximum-number/

- 485. Max Consecutive Ones
https://leetcode.com/problems/max-consecutive-ones/

- 674. Longest Continuous Increasing Subsequence
https://leetcode.com/problems/longest-continuous-increasing-subsequence/





Assignments 2:
Q. Implement a Stack class using resizable array that implements the Stack interface defined in class.
Throw appropriate exception when required.



Reference links:
https://en.wikipedia.org/wiki/List_of_data_structures
https://en.wikipedia.org/wiki/List_of_algorithms



20. Valid Parentheses
https://leetcode.com/problems/valid-parentheses/

1381. Design a Stack With Increment Operation
https://leetcode.com/problems/design-a-stack-with-increment-operation/description/



Day 2

Assignments:
Q1. Define Queue as ADT (Refer to class notes).

Q2. Implement a Generic Queue class using array that implements the Queue interface defined in Q1.
Throw appropriate exception when required.
(Refer to class notes)



Day 3
Assignment 1: Implement Queue interface defined on Day 2, using Singly linked list.

Assignment 2: For sorted singly linked list, implement
a) following function to delete the specified element
   void delete(int element);
b) following function to delete all occurrences of specified element
   void deleteAll(int element);
a) following function to return true if specified element is present in list else return false
   boolean search(int element);
Refer to the interface (SortedList) and partial implementation (class SortedSinglyList) done in class today.



[Linked List Practice Problems]
- 203. Remove Linked List Elements
https://leetcode.com/problems/remove-linked-list-elements/

- 83. Remove Duplicates from Sorted List
https://leetcode.com/problems/remove-duplicates-from-sorted-list/

- 206. Reverse Linked List
https://leetcode.com/problems/reverse-linked-list/

- 1290. Convert Binary Number in a Linked List to Integer
https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/

- 21. Merge Two Sorted Lists
https://leetcode.com/problems/merge-two-sorted-lists/

- 141. Linked List Cycle
https://leetcode.com/problems/linked-list-cycle/

- 160. Intersection of Two Linked Lists
https://leetcode.com/problems/intersection-of-two-linked-lists/

- 234. Palindrome Linked List
https://leetcode.com/problems/palindrome-linked-list/

- 876. Middle of the Linked List
https://leetcode.com/problems/middle-of-the-linked-list/

- 160. Intersection of Two Linked Lists
https://leetcode.com/problems/intersection-of-two-linked-lists/



Day 4  (1st May 2025)

Assignment 1: For doubly linked list, implement
a) following function to add specified element at the end list
   void addAtRear(int element);
a) following function to remove first node and return its value. Function should throw appropriate exception is list is empty.
   int deleteFirstNode();
Refer to the interface (DList) and partial implementation (class DoublyList) done in class today.

Assignment 2: For sorted doubly linked list, implement
a) following function to delete the specified element
   void delete(int element);
b) following function to delete all occurrences of specified element
   void deleteAll(int element);
a) following function to return true if specified element is present in list else return false
   boolean search(int element);
Refer to the interface (SortedList) and partial implementation (class SortedDList) done in class today.

Day 5 (3rd May)

Assignments
1. Write recursive algorithm to find quotient after dividing two numbers.
   Using above definition, implement following function to return quotient after dividing two numbers (a / b).
int quotient(int a, int b);
   Follow up: Modify implementation/Implement wrapper function to handle both positive and negative numbers.

2. Write recursive algorithm to find remainder after dividing two numbers.
   Using above definition, implement following function to return remainder after dividing two numbers (a % b).
int remainder(int a, int b);
   Follow up: Modify 


implementation/Implement wrapper function to handle both positive and negative numbers.

3. Implement following funtion to "optimally" multiple two numbers, recursively. Handle both negative and positive numbers.
int multiply(int a, int b);



Day 6 (5th May 2025)


Assignments
1. In the "BinaryTree" class implemented today in class, add following methods to print tree contents using preorder and postorder traversal.
void printUsingPreorder();
void printUsingPostorder();

2. Implement the following function to return number of nodes in a binary tree.
int CountNodes();

3. Implement the following function to return number of leaf nodes in a binary tree.
int CountLeafNodes();

4. Implement the following function to return number of nodes in a binary tree, with specific value in it.
int CountNodesWithValue(int value);


Practice
1. Invert Binary Tree
https://leetcode.com/problems/invert-binary-tree/



Day 7 (6th May)

Assignments
1. Implement the following function to find the height of a binary tree.
int height();
Can use following link to test the correctness of the algorithm/code.
https://www.hackerrank.com/challenges/tree-height-of-a-binary-tree/problem

2. Implement a function to find smallest element in a binary search tree.
Find the time complexity of the algorithm.
int findSmallest();

3. Implement a function to find largest element in a binary search tree.
Find the time complexity of the algorithm.
int findLargest();

4. Implement delete in BST using inorder predecessor.





Practice
1. Binary Tree Level Order Traversal
https://leetcode.com/problems/binary-tree-level-order-traversal/

2. Binary Tree Zigzag Level Order Traversal
https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/

3. Search in a Binary Search Tree
https://leetcode.com/problems/search-in-a-binary-search-tree/

4. Validate Binary Search Tree
https://leetcode.com/problems/validate-binary-search-tree/

5. Insert into a Binary Search Tree
https://leetcode.com/problems/insert-into-a-binary-search-tree/

6. Delete Node in a BST
https://leetcode.com/problems/delete-node-in-a-bst/

7. Binary Tree Level Order Traversal
https://leetcode.com/problems/binary-tree-level-order-traversal/

8. Binary Tree Level Order Traversal II
https://leetcode.com/problems/binary-tree-level-order-traversal-ii/

9. Diameter of Binary Tree
https://leetcode.com/problems/diameter-of-binary-tree/

10. Convert Sorted Array to Binary Search Tree
https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/

11. Convert Sorted List to Binary Search Tree
https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/



Day 8 (7th May)

NO ASSIGNMENT 


*********************
Day 9 (8th May)

Assignment
1. Implement the following function to find an element in an unsorted array, using linear search.
boolean findUsingLinearSearch(int[] arr, int element);

2. Implement the following function to find an element in a sorted array, using binary search.
boolean findUsingBinarySearch(int[] arr, int element);
Hint: Sort the array using the sorting algorithm implemented below.

3. Implement the following function to sort the given array in descending order, using Bubble Sort
void bubbleSort(int[] arr);
Use the algorithm described in class to start from left side of array, to move smallest element towards the right end.

4. Implement the following function to sort the given array in descending order, using Insertion Sort
void insertionSort(int[] arr);

5. Implement the following function to check if given array elements are sorted or not.
boolean isArraySorted(int[] arr);
Hint: Use logic used in bubble sort.



Exercise 1: Implement the above algorithms to sort elements in descending order.

Exercise 2: Implement Bubble Sort to start from right end of array, to bring appropriate element towards the left side.

Exercise 3: Implement the algorithm to merge two sorted arrays. Use the following link to test your code.
https://leetcode.com/problems/merge-sorted-array

Exercise 4: Implement the algorithm to merge two sorted linked lists. Use the following link to test your code.
https://leetcode.com/problems/merge-two-sorted-lists

Exercise 5: Implement Merge Sort using multi threading.

Exercise 6: Merge k Sorted Lists
https://leetcode.com/problems/merge-k-sorted-lists

Exercise 7: Implement Merge Sort using multi threading.



[Practice problems that uses Binary Search algorithm as base]
https://leetcode.com/problems/single-element-in-a-sorted-array/
https://leetcode.com/problems/search-in-rotated-sorted-array/
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/
https://leetcode.com/problems/first-bad-version/


*************************************

Day 10. (9th May)


Assignment
1. Implement following function to sort the given array in descending order, using merge sort
public void mergeSort(int[] arr)

2. Implement following function to sort the given array in descending order, using quick sort
public void quickSort(int[] arr)

3. Implement following function to sort the given array in descending order, using heap sort
public void heapSort(int[] arr)





- OpenJDK
https://openjdk.org/

- Github repo of OpenJDK implementation.
https://github.com/openjdk/jdk

- Location of source code for java.util classes.
https://github.com/openjdk/jdk/tree/master/src/java.base/share/classes/java/util
***********************+****

Day 11(10th May)

Assignment 1: Implement a hash table class in which each bucket is implemented as a linked list.
Use the linked list class that is implemented earlier in module for this implementation.



Exercise 1: Modify MakeMaxHeap algorithm covered in class to remove tail recursion.

***************************************


Day 12 (12th May)


Assignment 1: Implement printBFS() method in AdjListGraph class (code written in class today).
The method should traverse graph using BFS and print the vertices.
Graph data will be stored in an adjacency list.


